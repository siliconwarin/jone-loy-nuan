"use client";

import { useActionState, useTransition, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { toast } from "sonner";
import { Loader2, CheckCircle, AlertCircle } from "lucide-react";

// üé® shadcn/ui Components
import { Button } from "@/components/ui/button";
import {
	Card,
	CardHeader,
	CardTitle,
	CardDescription,
	CardContent,
} from "@/components/ui/card";
import {
	Form,
	FormControl,
	FormField,
	FormItem,
	FormLabel,
	FormMessage,
} from "@/components/ui/form";
import {
	Select,
	SelectContent,
	SelectItem,
	SelectTrigger,
	SelectValue,
} from "@/components/ui/select";

// üî• Modern Imports
import { useQuizResultStore } from "@/store/quiz-store";
import { surveySchema, type SurveyFormData } from "@/lib/schema";

// üìä Form Data Constants (‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà 3 ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏£‡∏Å)
const FORM_DATA = {
	ageGroups: [
		{ value: "under18", label: "‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 18 ‡∏õ‡∏µ" },
		{ value: "18-24", label: "18-24 ‡∏õ‡∏µ" },
		{ value: "25-34", label: "25-34 ‡∏õ‡∏µ" },
		{ value: "35-44", label: "35-44 ‡∏õ‡∏µ" },
		{ value: "45-54", label: "45-54 ‡∏õ‡∏µ" },
		{ value: "55-64", label: "55-64 ‡∏õ‡∏µ" },
		{ value: "65+", label: "65 ‡∏õ‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ" },
	],
	educationLevels: [
		{ value: "none", label: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏∏‡∏í‡∏¥‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤" },
		{ value: "primary", label: "‡∏õ‡∏£‡∏∞‡∏ñ‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤" },
		{ value: "secondary", label: "‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤" },
		{ value: "vocational", label: "‡∏õ‡∏ß‡∏ä./‡∏õ‡∏ß‡∏™." },
		{ value: "bachelor", label: "‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡∏ï‡∏£‡∏µ" },
		{ value: "master", label: "‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡πÇ‡∏ó" },
		{ value: "doctorate", label: "‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡πÄ‡∏≠‡∏Å" },
	],
	occupations: [
		{ value: "student", label: "‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô/‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤" },
		{ value: "government", label: "‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£/‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏£‡∏±‡∏ê‡∏ß‡∏¥‡∏™‡∏≤‡∏´‡∏Å‡∏¥‡∏à" },
		{ value: "private", label: "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÄ‡∏≠‡∏Å‡∏ä‡∏ô" },
		{ value: "business", label: "‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß/‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢" },
		{ value: "freelance", label: "‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏≠‡∏¥‡∏™‡∏£‡∏∞/‡∏ü‡∏£‡∏µ‡πÅ‡∏•‡∏ô‡∏ã‡πå" },
		{ value: "labor", label: "‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ" },
		{ value: "agriculture", label: "‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£" },
		{ value: "retired", label: "‡πÄ‡∏Å‡∏©‡∏µ‡∏¢‡∏ì‡∏≠‡∏≤‡∏¢‡∏∏" },
		{ value: "unemployed", label: "‡∏ß‡πà‡∏≤‡∏á‡∏á‡∏≤‡∏ô" },
		{ value: "other", label: "‡∏≠‡∏∑‡πà‡∏ô‡πÜ" },
	],
};

// üöÄ Modern Action State Type
type ActionState = {
	status: "idle" | "loading" | "success" | "error";
	message?: string;
};

// üî• Modern Server Action (Async Function)
async function submitSurveyAction(
	prevState: ActionState,
	formData: FormData
): Promise<ActionState> {
	try {
		// üîÑ Simulate API delay for UX
		await new Promise((resolve) => setTimeout(resolve, 1500));

		// üìä Parse form data
		const rawData = Object.fromEntries(formData.entries());

		// üéØ Get quiz score data from hidden fields
		const totalScore = parseInt(formData.get("totalScore") as string) || 0;
		const totalQuestions =
			parseInt(formData.get("totalQuestions") as string) || 10;

		// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° debug log
		console.log("Form data entries:", Array.from(formData.entries()));
		console.log("Raw form data:", rawData);
		console.log("Total score:", totalScore);
		console.log("Total questions:", totalQuestions);

		// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á surveyData ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö schema ‡πÉ‡∏´‡∏°‡πà
		const surveyData = {
			ageGroup: rawData.ageGroup,
			education: rawData.education,
			occupation: rawData.occupation,
			totalScore,
			totalQuestions,
		};

		// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° debug log
		console.log("Survey data before validation:", surveyData);

		// üîç Validate with Zod
		const validatedData = surveySchema.parse(surveyData);

		// üöÄ Call API
		const response = await fetch("/api/survey-response", {
			method: "POST",
			headers: { "Content-Type": "application/json" },
			body: JSON.stringify(validatedData),
		});

		if (!response.ok) {
			throw new Error("Failed to submit survey");
		}

		return {
			status: "success",
			message: "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•! üéâ",
		};
	} catch (error) {
		console.error("Survey submission error:", error);
		return {
			status: "error",
			message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
		};
	}
}

export default function SurveyPage() {
	const router = useRouter();
	const [isPending, startTransition] = useTransition();

	// üî• Modern useActionState Hook
	const [actionState, formAction] = useActionState(submitSurveyAction, {
		status: "idle" as const,
	});

	// üéØ Quiz Store for Score
	const { getSummary } = useQuizResultStore();
	const { score, total } = getSummary();

	// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° debug log
	console.log("Quiz store data:", { score, total });

	// üé® React Hook Form Setup
	const form = useForm<SurveyFormData>({
		resolver: zodResolver(surveySchema),
		defaultValues: {
			// ‚úÖ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà default values ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÉ‡∏ä‡πâ hidden fields
		},
	});

	// üöÄ Handle Success State
	useEffect(() => {
		if (actionState.status === "success") {
			toast.success(actionState.message);
			startTransition(() => {
				router.push("/result");
			});
		} else if (actionState.status === "error") {
			toast.error(actionState.message);
		}
	}, [actionState.status, actionState.message, router]);

	// üé® Loading State
	const isLoading = actionState.status === "loading" || isPending;

	return (
		<div className="h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 py-8 px-4 overflow-y-auto">
			<div className="max-w-2xl mx-auto">
				{/* üèÜ Score Display */}
				<Card className="mb-8 border-0 shadow-lg bg-white/80 backdrop-blur-sm">
					<CardHeader className="text-center">
						<CardTitle className="text-2xl font-bold text-gray-900">
							üéâ ‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏î‡πâ {score} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô!
						</CardTitle>
						<CardDescription className="text-gray-600">
							‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
						</CardDescription>
					</CardHeader>
				</Card>

				{/* üìù Survey Form */}
				<Card className="border-0 shadow-xl bg-white/90 backdrop-blur-sm">
					<CardHeader>
						<CardTitle className="flex items-center gap-2">
							üìä ‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô
						</CardTitle>
						<CardDescription>
							‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
						</CardDescription>
					</CardHeader>

					<CardContent>
						<Form {...form}>
							<form action={formAction} className="space-y-6">
								{/* üéØ Hidden Quiz Score Fields */}
								<input type="hidden" name="totalScore" value={score || 0} />
								<input
									type="hidden"
									name="totalQuestions"
									value={total || 10}
								/>

								{/* üë§ Age Group */}
								<FormField
									control={form.control}
									name="ageGroup"
									render={({ field }) => (
										<FormItem>
											<FormLabel>‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ *</FormLabel>
											<Select
												onValueChange={field.onChange}
												defaultValue={field.value}
												name="ageGroup"
											>
												<FormControl>
													<SelectTrigger>
														<SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏" />
													</SelectTrigger>
												</FormControl>
												<SelectContent>
													{FORM_DATA.ageGroups.map((age) => (
														<SelectItem key={age.value} value={age.value}>
															{age.label}
														</SelectItem>
													))}
												</SelectContent>
											</Select>
											<FormMessage />
										</FormItem>
									)}
								/>

								{/* üéì Education */}
								<FormField
									control={form.control}
									name="education"
									render={({ field }) => (
										<FormItem>
											<FormLabel>‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ *</FormLabel>
											<Select
												onValueChange={field.onChange}
												defaultValue={field.value}
												name="education"
											>
												<FormControl>
													<SelectTrigger>
														<SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤" />
													</SelectTrigger>
												</FormControl>
												<SelectContent>
													{FORM_DATA.educationLevels.map((edu) => (
														<SelectItem key={edu.value} value={edu.value}>
															{edu.label}
														</SelectItem>
													))}
												</SelectContent>
											</Select>
											<FormMessage />
										</FormItem>
									)}
								/>

								{/* üíº Occupation */}
								<FormField
									control={form.control}
									name="occupation"
									render={({ field }) => (
										<FormItem>
											<FormLabel>‡∏≠‡∏≤‡∏ä‡∏µ‡∏û *</FormLabel>
											<Select
												onValueChange={field.onChange}
												defaultValue={field.value}
												name="occupation"
											>
												<FormControl>
													<SelectTrigger>
														<SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏ä‡∏µ‡∏û" />
													</SelectTrigger>
												</FormControl>
												<SelectContent>
													{FORM_DATA.occupations.map((occ) => (
														<SelectItem key={occ.value} value={occ.value}>
															{occ.label}
														</SelectItem>
													))}
												</SelectContent>
											</Select>
											<FormMessage />
										</FormItem>
									)}
								/>

								{/* üöÄ Submit Button */}
								<div className="pt-6">
									<Button
										type="submit"
										disabled={isLoading}
										className="w-full h-12 text-lg font-semibold bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200"
									>
										{isLoading ? (
											<>
												<Loader2 className="mr-2 h-5 w-5 animate-spin" />
												‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...
											</>
										) : actionState.status === "success" ? (
											<>
												<CheckCircle className="mr-2 h-5 w-5" />
												‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!
											</>
										) : actionState.status === "error" ? (
											<>
												<AlertCircle className="mr-2 h-5 w-5" />
												‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
											</>
										) : (
											"‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°"
										)}
									</Button>
								</div>
							</form>
						</Form>
					</CardContent>
				</Card>
			</div>
		</div>
	);
}
